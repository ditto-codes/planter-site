/*
  
  FUNCTIONS
  
  Global Sass functions
  
*/

@use "sass:list";
@use "sass:math";

// SPACING
// ────────────────────────────────────

// Main spacer function that uses $spacer-size-map 
// to output a list of valid CSS size values
// 
// $_sizes – an arbitrary list of keys that match keys in $space-size-map
//           or an explicit modifier value (e.g. sm, lg, 1.5, 3)
// 
@function space($_sizes) {
  // Convert argument to string, so we can convert it to a List
  // $str: #{$_sizes};
  // $size-list: str-to-list($str);

  $sizes: ();
  @each $size in $_sizes {
    @if map-has-key($spacer-size-map, $size) {
      $sizes: list.append($sizes, map-get($spacer-size-map, $size));
    }
    @else {
      $sizes: list.append($sizes, calc(#{$spacer} * #{$size}));
    }
  }
  @return #{$sizes};
}

// Alias wrapper for `space` function
@function sp($multipliers...) {
  @return space($multipliers...);
}

// BOOTSTRAP GRID DEPENDENCY
// ────────────────────────────────────
// Credits: twbs
// https://github.com/twbs/bootstrap/blob/3aaaa01ffa71e5a784451753d5bf9b86a1d5323c/scss/mixins/_breakpoints.scss

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
} 

@function unitless($number) {
  @return math.div($number, ($number * 0 + 1));
}

// only accepts pixels for min max font size
@function minmax($minBreakpoint, $maxBreakpoint, $minValuePx, $maxValuePx) {
  $minWidth: '';
  $maxWidth: '';
  $minValuePx: unitless($minValuePx); 
  $maxValuePx: unitless($maxValuePx); 

  // Check if the supplied min breakpoint exists in our breakpoints map
  @if map-has-key($breakpoints, $minBreakpoint) {
    $minWidth: unitless(map-get($breakpoints, $minBreakpoint));
  }
  // Value is not a defined breakpoint, but use it directly
  @else {
    $minWidth: unitless($minBreakpoint);
  }
  // Check if the supplied max breakpoint exists in our breakpoints map
  @if map-has-key($breakpoints, $maxBreakpoint) {
    $maxWidth: unitless(map-get($breakpoints, $maxBreakpoint));
  }
  // Value is not a defined breakpoint, but use it directly
  @else {
    $maxWidth: unitless($maxBreakpoint);
  }

  $slope: math.div($maxValuePx - $minValuePx, $maxWidth - $minWidth);
  $yAxisIntersection: $minValuePx - $minWidth * $slope;

  @return unquote("clamp(#{$minValuePx}px, calc(#{$yAxisIntersection}px + #{$slope} * 100vw), #{$maxValuePx}px)");
}